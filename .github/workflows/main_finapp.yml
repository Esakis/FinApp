# ==============================================
#  Build & Deploy  –  Angular + .NET 8 ⇒ AppSvc
# ==============================================

name: Build and deploy FinApp to Azure Web App (F1)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ANGULAR_DIR: Frontend/FinAppFront
  PUBLISH_DIR: publish        # jeden punkt prawdy

# ───────────────────────────────────────────────
# 1) BUILD
# ───────────────────────────────────────────────
jobs:
  build:
    runs-on: windows-latest
    permissions: { contents: read }

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with: { node-version: 18.x }

    - name: Setup .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with: { dotnet-version: 8.x }

    # ─── znajdź Store.csproj ────────────────────
    - name: Locate Store.csproj
      id: locate
      shell: pwsh
      run: |
        $csproj = Get-ChildItem -Recurse -Filter Store.csproj | Select-Object -First 1
        if (-not $csproj) { Write-Error "Store.csproj not found"; exit 1 }
        echo "csproj=$($csproj.FullName.Replace('\','/'))" >> $env:GITHUB_OUTPUT
        Write-Host "Found: $csproj"

    # ─── build Angular ──────────────────────────
    - name: Build Angular
      working-directory: ${{ env.ANGULAR_DIR }}
      run: |
        npm ci
        npm run build -- --configuration production

    # ─── copy dist → wwwroot ────────────────────
    - name: Copy Angular build to API/wwwroot
      shell: pwsh
      run: |
        $apiDir = Split-Path '${{ steps.locate.outputs.csproj }}'
        $dest   = Join-Path $apiDir 'wwwroot'
        New-Item -ItemType Directory -Force -Path $dest | Out-Null
        robocopy "${{ env.ANGULAR_DIR }}/dist/fin-app-front" "$dest" /E /NJH /NJS /NDL
        if ($LASTEXITCODE -gt 3) { exit $LASTEXITCODE } else { exit 0 }

    # ─── build + publish API ────────────────────
    - name: dotnet build
      run: dotnet build "${{ steps.locate.outputs.csproj }}" -c Release

    - name: dotnet publish
      run: dotnet publish "${{ steps.locate.outputs.csproj }}" -c Release -o ${{ env.PUBLISH_DIR }}

    # ─── artefakt = katalog publish ─────────────
    - uses: actions/upload-artifact@v4
      with:
        name: publish            # *nazwa artefaktu*
        path: ${{ env.PUBLISH_DIR }}

# ───────────────────────────────────────────────
# 2) DEPLOY
# ───────────────────────────────────────────────
  deploy:
    runs-on: windows-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
    # ⇣ pobierz artefakt DO katalogu publish
    - uses: actions/download-artifact@v4
      with:
        name: publish
        path: ${{ env.PUBLISH_DIR }}

    - name: Azure login (OIDC)
      uses: azure/login@v2
      with:
        client-id:       ${{ secrets.AZUREAPPSERVICE_CLIENTID_9213863F16E6412D89AFBADD35BF055E }}
        tenant-id:       ${{ secrets.AZUREAPPSERVICE_TENANTID_0FF71B2D203B4C1A8DD949B53A42CF6A }}
        subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_3FC1188BDFCB4392A0BD5592CF2323F1 }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: FinApp
        slot-name: Production
        package: ${{ env.PUBLISH_DIR }}   # ← katalog istnieje
